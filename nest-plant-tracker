#!/usr/bin/ruby

require 'sinatra'
require 'haml'
require 'json'
require 'bcrypt'
require 'rom-repository'
require 'rom-changeset'

enable :sessions
set :port, 4595

module PlantTracker
  class Plant < ROM::Struct
    def last_watered_at
      plant_waters.each do |water|
        next unless water[:watering_status][:counts_as_watered]
        return water[:watered_at]
      end

      nil
    end

    def last_water_check
      return nil if plant_waters.empty?
      plant_waters[0][:watered_at]
    end

    def requires_water?
      water_freq > 0
    end
  end
end

class Time
  def app_format
    self.getlocal('-05:00').strftime('%Y-%m-%d %H:%M')
  end

  def ago
    days = (Time.now - self) / (60*60*24)
    int_days = days.to_i
    hours = ((days - int_days) * 24).to_i
    ago = "#{int_days}d #{hours}h ago"
    if(int_days == 0 and hours == 0) then
      ago = "#{((Time.now-self) / 60).to_i} mins ago"
    elsif(int_days == 0) then
      ago = "#{hours} hours ago" if int_days == 0
    end

    ago
  end

  def app_format_with_ago
    "#{self.app_format} (#{self.ago})"
  end

  def days_ago
    (Time.now - self) / (60*60*24).to_i
  end
end

class NilClass
  def app_format
    return "Never"
  end

  def ago
    return "Never"
  end

  def app_format_with_ago
    return "Never"
  end
end

DB = ROM.container(:sql, "sqlite://#{Dir.pwd}/nest-plant-tracker.sqlite3") do |config|
  config.relation(:users) do
    schema(infer: true)
  end

  config.relation(:plants) do
    struct_namespace PlantTracker
    auto_struct true
    schema(infer: true) do
      associations do
        belongs_to :location
        has_many :changelogs
        has_many :plant_waters
      end
    end
  end

  config.relation(:plant_waters) do
    schema(infer: true) do
      associations do
        belongs_to :plant
        belongs_to :watering_status
      end
    end
  end

  config.relation(:locations) do
    schema(infer: true) do
      associations do
        has_many :plants
      end
    end
  end

  config.relation(:changelogs) do
    schema(infer: true) do
      associations do
        belongs_to :plant
      end
    end
  end
  
  config.relation(:watering_statuses) do
    schema(infer: true) do
      associations do
        has_many :plant_waters
      end
    end
  end
end

class UserRepo < ROM::Repository[:users]
  def check_login(username, password)
    user = users.where(username: username).one!
    return true if user and BCrypt::Password.new(user[:pwhash]) == password
    false
  end
end

class PlantRepo < ROM::Repository[:plants]
  struct_namespace PlantTracker
  
  def query(conditions)
    plants.where(conditions).to_a
  end

  def by_id(id)
    plants
      .by_pk(id)
      .combine(:locations)
      .combine(:changelogs)
      .combine(plant_waters: :watering_statuses)
      .node(:plant_waters) {|plant_waters_relation|
        plant_waters_relation.reverse
      }
      .node(:changelogs) {|changelogs_relation|
        changelogs_relation.reverse
      }
      .one!
  end

  def active_plants_with_locations
    plants
      .join(:locations)
      .combine(:locations)
      .combine(plant_waters: :watering_statuses)
      .node(:plant_waters) {|plant_waters_relation|
        plant_waters_relation.reverse
      }
      .order(locations[:name])
      .where(active: true)
  end

  def add_plant(science_name:, plant_type:, our_name:, location_id:, water_freq:, fert_notes:, water_notes:, gen_notes:)
    plants.changeset(:create,
      science_name: science_name,
      plant_type: plant_type,
      our_name: our_name,
      location_id: location_id,
      water_freq: water_freq,
      fertilizer_notes: fert_notes,
      watering_notes: water_notes,
      general_notes: gen_notes,
      active: true).commit
  end
end

class LocationRepo < ROM::Repository[:locations]
  def all
    locations.to_a
  end

  def query(conditions)
    locations.where(conditions).to_a
  end

  def by_id(id)
    locations.by_pk(id).one!
  end
end

class ChangelogRepo < ROM::Repository[:changelogs]
  def add_log_entry(plant:, by:, message:)
    changelogs.changeset(:create, plant_id: plant, logged_at: Time.now, logged_by: by, message: message).commit
  end
end

class WateringStatusRepo < ROM::Repository[:watering_statuses]
  def all
    watering_statuses.to_a
  end
end

class PlantWatersRepo < ROM::Repository[:plant_waters]
end

def require_logged_in
  return if session[:user]

  session[:desired_page] = request.fullpath
  redirect '/login'
end

def is_logged_in?
  session.include? :user
end


### ROOT

get '/' do
  redirect '/plants'
end


### USER MANAGEMENT

get '/login' do
  haml :login
end

post '/login' do
  login_ok = UserRepo.new(DB).check_login(params[:username], params[:password])
  if login_ok then
    session[:user] = params[:username]
    desired_page = session[:desired_page]
    session.delete :desired_page
    redirect desired_page || '/plants'
  else
    redirect '/login'
  end
end

get '/logout' do
  session.delete :user
  haml :logout
end


### PLANTS

get '/plants' do
  @plants = PlantRepo.new(DB).active_plants_with_locations
  haml :plants
end

get '/plants/new' do
  require_logged_in

  @locations = LocationRepo.new(DB).all
  haml :plants_new
end

post '/plants/new' do
  require_logged_in

  params.each do |key, val|
    params[key] = nil if val == ''
  end

  plant = PlantRepo.new(DB).add_plant science_name: params['science_name'],
   plant_type: params['plant_type'],
   our_name: params['our_name'],
   water_freq: params['water_every'],
   location_id: params['location'],
   fert_notes: params['fertilizer_notes'],
   water_notes: params['water_notes'],
   gen_notes: params['general_notes']

  ChangelogRepo.new(DB).add_log_entry plant: plant.id,
    by: session[:user],
    message: "Added plant to database."

  redirect '/plants'
end

get '/plants/:id' do |id|
  @plant = PlantRepo.new(DB).by_id(id)
  @locations = LocationRepo.new(DB).all
  @watering_statuses = WateringStatusRepo.new(DB).all
  haml :plant
end

post '/plants/:id' do |plant_id|
  require_logged_in

  if(params[:location]) then
    old_loc = PlantRepo.new(DB).by_id(plant_id)[:location][:name]
    new_loc = LocationRepo.new(DB).by_id(params[:location])[:name]
    
    ChangelogRepo.new(DB).add_log_entry plant: plant_id,
      by: session[:user],
      message: "Plant moved from #{old_loc} to #{new_loc}."
    
    plant = DB.relations[:plants].by_pk(plant_id)
    plant.changeset(:update, location_id: params[:location]).commit
  elsif(params[:name]) then
    old_name = PlantRepo.new(DB).by_id(plant_id)[:our_name]
    ChangelogRepo.new(DB).add_log_entry plant: plant_id,
      by: session[:user],
      message: "Plant renamed from #{old_name} to #{params[:name]}."
    
    plant = DB.relations[:plants].by_pk(plant_id)
    plant.changeset(:update, our_name: params[:name]).commit
  elsif(params[:waterstatus]) then
    plant_waters = DB.relations[:plant_waters]
    plant_waters.changeset(:create,
      plant_id: plant_id,
      watered_at: Time.now, watered_by: session[:user],
      watering_status_id: params[:waterstatus],
      notes: params[:notes] == '' ? nil : params[:notes]
    ).commit
  elsif(params[:water_freq]) then
    old_freq = PlantRepo.new(DB).by_id(plant_id)[:water_freq]
    ChangelogRepo.new(DB).add_log_entry plant: plant_id,
      by: session[:user],
      message: "Watering frequency changed from #{old_freq} to #{params[:water_freq]}."

    plant = DB.relations[:plants].by_pk(plant_id)
    plant.changeset(:update, water_freq: params[:water_freq].to_i).commit
  end

  redirect "/plants/#{plant_id}"
end

delete '/plants/:id' do |plant_id|
  require_logged_in

  plant = DB.relations[:plants].by_pk(plant_id)
  plant.changeset(:update, active: false).commit

  ChangelogRepo.new(DB).add_log_entry plant: plant_id,
    by: session[:user],
    message: "Archived plant."

  redirect '/plants'
end


### BULK WATERING

get '/bulk-watering' do
  require_logged_in

  selected_locations = []
  params.each do |key, val|
    if(key.start_with? 'location') then
      selected_locations << key.delete_prefix('location').to_i
    end
  end
  selected_locations << (0..999) if selected_locations.empty? # default, covers all locations
  
  @within_watering_days = params[:within_watering_days] || 0
  @not_checked_in_days = params[:not_checked_in] || 2
  
  @plants = PlantRepo.new(DB).active_plants_with_locations
    .where {water_freq > 0}
    .where {location_id.in(*selected_locations)}
    .order(:location_id, :watering_order, :our_name)
  @watering_statuses = WateringStatusRepo.new(DB).all
  @locations = LocationRepo.new(DB).all

  haml :bulk_watering
end

post '/bulk-watering' do
  require_logged_in
  
  plant_waters = DB.relations[:plant_waters]
  params.each do |key, status_id|
    next if status_id.empty?
    next unless key.start_with? 'plant'

    plant_id = key.delete_prefix('plant')
    
    plant_waters.changeset(:create,
      plant_id: plant_id,
      watered_at: Time.now, watered_by: session[:user],
      watering_status_id: status_id,
      notes: params["note#{plant_id}"] == '' ? nil : params["note#{plant_id}"]
    ).commit
  end

  redirect request.fullpath
end


### LOCATIONS

get '/locations' do
  require_logged_in

  @locations = LocationRepo.new(DB).all

  haml :locations
end

post '/locations' do
  require_logged_in

  loc = DB.relations[:locations].by_pk(params[:id])
  loc.changeset(:update, name: params[:name]).commit

  redirect '/locations'
end


### WATERING ORDER

get '/watering_order/:location_id' do |loc_id|
  require_logged_in

  @plants = PlantRepo.new(DB).active_plants_with_locations.where{water_freq > 0}.where(location_id: loc_id).order(:watering_order, :our_name).to_a
  @location = LocationRepo.new(DB).by_id(loc_id)

  haml :watering_order
end

post '/watering_order/:location_id' do |loc_id|
  require_logged_in

  watering_order = JSON.parse(params['watering_order'])
  watering_order.each do |plant_id, order|
    plant = DB.relations[:plants].by_pk(plant_id)
    plant.changeset(:update, watering_order: order).commit
  end

  redirect "/watering_order/#{loc_id}"
end

### REPORTS

get '/reports/water_freq' do
  plants = PlantRepo.new(DB).active_plants_with_locations.where {water_freq > 0}

  @report_entries = []
  plants.each do |plant|
    not_waters = 0
    plant.plant_waters.each do |water|
      break if water.watered_at.days_ago > plant.water_freq * 4
      not_waters += 1 unless water.watering_status.counts_as_watered
    end
    if(not_waters > 2) then
      recent_change = false
      changelog = PlantRepo.new(DB).by_id(plant.id).changelogs
      changelog.each do |log_entry|
        break if log_entry.logged_at.days_ago > 30
        if(log_entry.message.include? "Watering frequency changed") then
          recent_change = true
          break
        end
      end
      text = "didn't need water #{not_waters} times in the last #{plant.water_freq * 4} days"
      text += " (watering frequency has recently been changed)" if recent_change
      @report_entries << {
        plant_id: plant.id,
        plant_name: plant.our_name,
        text: text
      }
    end
    watering_dates = []
    plant.plant_waters.each do |water|
      break if water.watered_at.days_ago > 60
      watering_dates << water.watered_at if water.watering_status.counts_as_watered
    end
    next unless watering_dates.length >= 4 # need a reasonable sample size
    next if recent_change # recent changes throw this check off a lot
    watering_gaps = []
    watering_dates.each_index do |idx|
      break if idx == watering_dates.length - 1
      watering_gaps << watering_dates[idx] - watering_dates[idx+1]
    end
    watering_gap_avg = watering_gaps.inject{ |sum, el| sum + el }.to_f / watering_gaps.size
    if watering_gap_avg / (60*60*24) <= plant.water_freq - 1 then
      @report_entries << {
        plant_id: plant.id,
        plant_name: plant.our_name,
        text: "has needed water more frequently than their setting in the last 60 days"
      }
    end
  end

  haml :water_freq_report
end
